<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构</title>
    <url>/2022/04/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/</url>
    <content><![CDATA[<h3 id="二分算法："><a href="#二分算法：" class="headerlink" title="二分算法："></a>二分算法：</h3><p> 模板1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int start = 0, end = nums.length - 1;</span><br><span class="line">while (start + 1 &lt; end) &#123;</span><br><span class="line">    int mid = start + (end - start) / 2;</span><br><span class="line"></span><br><span class="line">    if (...) &#123;</span><br><span class="line">        start = mid;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        end = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个模版和别的模版相比，其优势所在，我们不需去关注 <strong>是否需要 mid +&#x2F;- 1</strong> ，也不需要去判断 while 循环后的 start、end 是否合法，具体问题我们只需要套模版即可。</p>
<p>在寻找最左或者最右边界的时候，需要注意在if里面先把mid赋给想要的边界值</p>
<p>写算法题切记变量输入顺序和使用顺序要一致，不然要出大问题。</p>
<h3 id="tree树"><a href="#tree树" class="headerlink" title="tree树"></a>tree树</h3><p>tree树又叫字典树。高效的存储和查找字符串集合的数据结构。</p>
<p>一般来说用到tree的要不数据都是小写字母或者大写字母或者单一形式的数据。</p>
<p>tree树原理是有一个root结点，每次进去的字符串按照单个字符拆分进去。</p>
<p><img src="C:\Users\zms\AppData\Roaming\Typora\typora-user-images\image-20220327154505649.png" alt="image-20220327154505649"></p>
<p>每到一个结尾的地方标记一下，访问到此处标识有这么一个字符串。还可以知道有几个这样的字符串。</p>
<p>模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> son[N][<span class="number">26</span>],a[N],idx,cnt[N];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p = <span class="number">0</span>;   <span class="comment">//每次一个新的字符串进来p都会重置为0</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;  <span class="comment">//标识对应位置 </span></span><br><span class="line">		<span class="keyword">if</span> (!son[p][u]) son[p][u]=++idx;    <span class="comment">//如果当前结点不存在  给他创建一个</span></span><br><span class="line">		p = son[p][u];                 <span class="comment">//p结点向下走 </span></span><br><span class="line">	&#125; </span><br><span class="line">	cnt[p]++;    <span class="comment">//计数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i] ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (son[p][u]) p = son[p][u];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt[p];</span><br></pre></td></tr></table></figure>

<h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>1.将两个集合合并</p>
<p>2询问两个元素是否在一个集合当中。</p>
<p>基本原理：每个集合用一棵树来表示，树根的编号就是整个集合的编号。每个结点存储它的父节点，p[x]表示x的父节点。</p>
<p>问题1；如何判断树根： if(px[x] &#x3D;&#x3D; x) 因为唯有跟结点没有父节点</p>
<p>问题2：如何求x的集合编号 ：while(p[x]!&#x3D;x) x&#x3D;[px]</p>
<p>问题3：如何合并这两棵树： px是x的集合编号，py是y的集合编号。合并可以让p[x]&#x3D;y 把x挂到y树上</p>
<p>c++写算法题有一个技巧，就是一些标识字符，用char op[2] 读入的时候用%s 这样会避免空格和回车。所以说一般建议用字符串读字母。</p>
<p>关于路径压缩的解释：<a href="https://www.runoob.com/data-structures/union-find-compress.html">并查集路径压缩 | 菜鸟教程 (runoob.com)</a></p>
<p>并查集模板题1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;    <span class="comment">//返回x的祖宗结点 并进行路径压缩 </span></span><br><span class="line">	<span class="keyword">if</span> (x != p[x]) p[x]=<span class="built_in">find</span>(p[x]);     <span class="comment">//如果不是根节点 那么就从它父节点找到祖宗结点  </span></span><br><span class="line">	<span class="keyword">return</span> p[x];                        <span class="comment">//最后返回父节点的值 也就是祖宗结点的值 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i ;       <span class="comment">//一开始都是独立个体 把自己设置为父节点 </span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		string op;</span><br><span class="line">		<span class="keyword">int</span> a,b;</span><br><span class="line">		cin&gt;&gt;op&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="string">&quot;m&quot;</span>) p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);    <span class="comment">//把结点挂接到b上去</span></span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b))  cout&lt;&lt;<span class="string">&quot;yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;no&quot;</span>&lt;&lt;endl;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;	                   </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>并查集例题</strong></p>
<p>动物王国中有三类动物 A,B,CA,B,C，这三类动物的食物链构成了有趣的环形。</p>
<p>AA 吃 BB，BB 吃 CC，CC 吃 AA。</p>
<p>现有 NN 个动物，以 1∼N1∼N 编号。</p>
<p>每个动物都是 A,B,CA,B,C 中的一种，但是我们并不知道它到底是哪一种。</p>
<p>有人用两种说法对这 NN 个动物所构成的食物链关系进行描述：</p>
<p>第一种说法是 <code>1 X Y</code>，表示 XX 和 YY 是同类。</p>
<p>第二种说法是 <code>2 X Y</code>，表示 XX 吃 YY。</p>
<p>此人对 NN 个动物，用上述两种说法，一句接一句地说出 KK 句话，这 KK 句话有的是真的，有的是假的。</p>
<p>当一句话满足下列三条之一时，这句话就是假话，否则就是真话。</p>
<ol>
<li>当前的话与前面的某些真的话冲突，就是假话；</li>
<li>当前的话中 XX 或 YY 比 NN 大，就是假话；</li>
<li>当前的话表示 XX 吃 XX，就是假话。</li>
</ol>
<p>你的任务是根据给定的 NN 和 KK 句话，输出假话的总数。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行是两个整数 NN 和 KK，以一个空格分隔。</p>
<p>以下 KK 行每行是三个正整数 D，X，YD，X，Y，两数之间用一个空格隔开，其中 DD 表示说法的种类。</p>
<p>若 D&#x3D;1D&#x3D;1，则表示 XX 和 YY 是同类。</p>
<p>若 D&#x3D;2D&#x3D;2，则表示 XX 吃 YY。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>只有一个整数，表示假话的数目。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤500001≤N≤50000,<br>0≤K≤1000000≤K≤100000</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100 7</span><br><span class="line">1 101 1 </span><br><span class="line">2 1 2</span><br><span class="line">2 2 3 </span><br><span class="line">2 3 3 </span><br><span class="line">1 1 3 </span><br><span class="line">2 3 1 </span><br><span class="line">1 5 5</span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50050</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> p[N],d[N],n,k;              <span class="comment">//p[]为结点父节点的值  d[]为结点到父节点的距离 </span></span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x != p[x])&#123;      <span class="comment">//如果不是跟结点 </span></span><br><span class="line">		<span class="keyword">int</span> temp = <span class="built_in">find</span>(p[x]);</span><br><span class="line">		d[x]+=d[p[x]];          <span class="comment">//加上每个到父节点的距离  更新权值</span></span><br><span class="line">		p[x] = temp; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p[x];              <span class="comment">//返回根节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) p[i] = i;</span><br><span class="line">   <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">       <span class="keyword">int</span> t,x,y;</span><br><span class="line">       cin&gt;&gt;t&gt;&gt;x&gt;&gt;y;</span><br><span class="line">       <span class="keyword">if</span> (x &gt; n || y &gt; n) res++;</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">int</span> px = <span class="built_in">find</span>(x),py = <span class="built_in">find</span>(y);</span><br><span class="line">           <span class="keyword">if</span> (t == <span class="number">1</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span> (px == py &amp;&amp; (d[x]-d[y])%<span class="number">3</span>) res++;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (px != py)&#123;   <span class="comment">//如果没有在同一个集合  加入进去 并算作一个集合</span></span><br><span class="line">                   p[px] = py;</span><br><span class="line">                   d[px] =  d[y] - d[x];               <span class="comment">//虽然说开始都是0但是作为未在同一个集合的动物 距离为0是合理刚好的</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (px == py&amp;&amp; (d[x]-d[y]<span class="number">-1</span>)%<span class="number">3</span>) res++;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (px != py)&#123;</span><br><span class="line">                   p[px] = py;</span><br><span class="line">                   d[px] =  d[y] + <span class="number">1</span> - d[x];      <span class="comment">//不太就会挨着加1</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	cout&lt;&lt;res;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>如何手写一个堆   可以使用数组来创建一个堆，较为方便。数组的下标从1开始，左孩子结点为2k(k为父节点下标)，右孩子结点在2k+1下标处。小顶堆，最小的在跟部。左右孩子都大于等于跟(父节点小于等于左右孩子结点)。大顶堆相反。</p>
<p><img src="C:\Users\zms\AppData\Roaming\Typora\typora-user-images\image-20220329195438289.png" alt="image-20220329195438289"></p>
<h3 id="二叉树基本理论知识"><a href="#二叉树基本理论知识" class="headerlink" title="二叉树基本理论知识"></a>二叉树基本理论知识</h3><p><a href="https://www.cnblogs.com/miaodi/p/9215504.html">n层满k叉树总共有多少个节点</a></p>
<p>2叉树</p>
<p>1 3 7 对应公式为(2^n-1)&#x2F;1</p>
<p>3叉树</p>
<p>1 4 13 对应公式为(3^n-1)&#x2F;2</p>
<p>4叉树</p>
<p>1 5 21对应公式为(4^n-1)&#x2F;3</p>
<p>…</p>
<p>n层k叉树，总共有(k^n-1)&#x2F;k-1</p>
<p>已知前中求后</p>
<p>PreOrder:     GDAFEMHZ</p>
<p>InOrder:      ADEFGHMZ</p>
<p>PostOrder:    AEFDHZMG</p>
<p>现在，假设仅仅知道前序和中序遍历，如何求后序遍历呢？比如，已知一棵树的前序遍历是”GDAFEMHZ”，而中序遍历是”ADEFGHMZ”应该如何求后续遍历?</p>
<p><strong>第一步</strong>，root最简单，前序遍历的第一节点G就是root。</p>
<p><strong>第二步</strong>，继续观察前序遍历GDAFEMHZ，除了知道G是root，剩下的节点必然是root的左右子树之外，没法找到更多信息了。</p>
<p><strong>第三步</strong>，那就观察中序遍历ADEFGHMZ。其中root节点G左侧的ADEF必然是root的左子树，G右侧的HMZ必然是root的右子树。</p>
<p><strong>第四步</strong>，观察左子树ADEF，左子树的中的根节点必然是大树的root的leftchild。在前序遍历中，大树的root的leftchild位于root之后，所以左子树的根节点为D。</p>
<p><strong>第五步</strong>，同样的道理，root的右子树节点HMZ中的根节点也可以通过前序遍历求得。在前序遍历中，一定是先把root和root的所有左子树节点遍历完之后才会遍历右子树，并且遍历的右子树的第一个节点就是右子树的根节点。</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p> 数组 （Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p>
<p>1.第一是线性表（Linear List）。顾名思义，线性表就是数据排成像一条线一样的结构。每个线性 表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。</p>
<p>2.第二个是连续的内存空间和相同类型的数据。</p>
<p>当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内 存地址：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a[i]_address = base_address + i * data_type_size</span><br></pre></td></tr></table></figure>

<p>由于数组的连续性存储特性。删除和增加是比较麻烦的。如果要在第k个位置上添加一个元素，有序的情况将第k个及其以后的依次移动一个位置，如果是无序的，把第k个位置的数直接存放到数组最后，在第k个位置直接填上要加入的数字。</p>
<p>但是，如果数组从 1 开始计数，那我们计算数组元素 a[k] 的内存地址就会变为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">a[k]_address = base_address + (k<span class="number">-1</span>)*type_size</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
